# -*- coding: utf-8 -*-
"""crypto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-fz9xBZbDt-Q1TjdAti78CcYZEim6ydw
"""

!pip install pandas requests python-dotenv

import requests
import pandas as pd

def get_crypto_data():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': 10,  # Top 10 cryptos
        'sparkline': False,
        'price_change_percentage': '7d,30d'
    }
    response = requests.get(url, params=params)
    data = response.json()

    # Process data into a structured DataFrame
    df = pd.DataFrame(data)
    df = df[['id', 'symbol', 'current_price', 'price_change_percentage_7d_in_currency', 'price_change_percentage_30d_in_currency']]
    df.columns = ['name', 'symbol', 'price', '7d_change', '30d_change']

    # Add mock sustainability data (in a real app, use a sustainability API)
    sustainability_data = {
        'bitcoin': {'energy': 'High', 'carbon': 'Very High', 'dev_activity': 'High'},
        'ethereum': {'energy': 'Medium', 'carbon': 'Low', 'dev_activity': 'Very High'},
        'cardano': {'energy': 'Low', 'carbon': 'Very Low', 'dev_activity': 'Medium'},
        'solana': {'energy': 'Low', 'carbon': 'Low', 'dev_activity': 'Medium'},
    }

    df['energy'] = df['name'].map(lambda x: sustainability_data.get(x, {}).get('energy', 'Unknown'))
    df['carbon'] = df['name'].map(lambda x: sustainability_data.get(x, {}).get('carbon', 'Unknown'))
    df['dev_activity'] = df['name'].map(lambda x: sustainability_data.get(x, {}).get('dev_activity', 'Unknown'))

    return df

# Fetch and display data
crypto_df = get_crypto_data()
crypto_df

def analyze_crypto(crypto_name, horizon='medium', risk='moderate', sustain_focus=False):
    crypto = crypto_df[crypto_df['name'] == crypto_name].iloc[0]

    # Profitability Analysis
    analysis = f"**{crypto['name'].upper()} (${crypto['price']})**\n"
    analysis += f"- 7-day change: {crypto['7d_change']:.2f}%\n"
    analysis += f"- 30-day change: {crypto['30d_change']:.2f}%\n"

    # Sustainability Analysis (if enabled)
    if sustain_focus:
        analysis += "\n**Sustainability Metrics**\n"
        analysis += f"- Energy Use: {crypto['energy']}\n"
        analysis += f"- Carbon Footprint: {crypto['carbon']}\n"
        analysis += f"- Dev Activity: {crypto['dev_activity']}\n"

    # Recommendation Logic
    recommendation = "\n**Recommendation:**\n"

    if horizon == 'short':
        metric = crypto['7d_change']
    else:
        metric = crypto['30d_change']

    if risk == 'conservative':
        threshold = 0
    elif risk == 'moderate':
        threshold = 5
    else:  # aggressive
        threshold = 10

    if sustain_focus and crypto['carbon'] not in ['Low', 'Very Low']:
        recommendation += "‚ö†Ô∏è Poor sustainability\n"

    if metric >= threshold:
        recommendation += "‚úÖ Good for investment\n"
    else:
        recommendation += "‚ùå Not ideal for your risk profile\n"

    return analysis + recommendation

# Test the function
print(analyze_crypto('bitcoin', horizon='medium', risk='moderate', sustain_focus=True))

def analyze_crypto(crypto_name, horizon='medium', risk='moderate', sustain_focus=False):
    crypto = crypto_df[crypto_df['name'] == crypto_name].iloc[0]

    # Profitability Analysis
    analysis = f"**{crypto['name'].upper()} (${crypto['price']})**\n"
    analysis += f"- 7-day change: {crypto['7d_change']:.2f}%\n"
    analysis += f"- 30-day change: {crypto['30d_change']:.2f}%\n"

    # Sustainability Analysis (if enabled)
    if sustain_focus:
        analysis += "\n**Sustainability Metrics**\n"
        analysis += f"- Energy Use: {crypto['energy']}\n"
        analysis += f"- Carbon Footprint: {crypto['carbon']}\n"
        analysis += f"- Dev Activity: {crypto['dev_activity']}\n"

    # Recommendation Logic
    recommendation = "\n**Recommendation:**\n"

    if horizon == 'short':
        metric = crypto['7d_change']
    else:
        metric = crypto['30d_change']

    if risk == 'conservative':
        threshold = 0
    elif risk == 'moderate':
        threshold = 5
    else:  # aggressive
        threshold = 10

    if sustain_focus and crypto['carbon'] not in ['Low', 'Very Low']:
        recommendation += "‚ö†Ô∏è Poor sustainability\n"

    if metric >= threshold:
        recommendation += "‚úÖ Good for investment\n"
    else:
        recommendation += "‚ùå Not ideal for your risk profile\n"

    return analysis + recommendation

# Test the function
print(analyze_crypto('bitcoin', horizon='medium', risk='moderate', sustain_focus=True))

def chatbot():
    print("üü¢ **Crypto Investment Advisor**")
    print("Available cryptos:", list(crypto_df['name']))

    while True:
        crypto = input("\nWhich crypto? (or 'exit'): ").strip().lower()
        if crypto == 'exit':
            break

        if crypto not in crypto_df['name'].values:
            print("‚ùå Not in top 10. Try: bitcoin, ethereum, cardano, solana")
            continue

        horizon = input("Horizon? (short/medium/long): ").lower()
        risk = input("Risk? (conservative/moderate/aggressive): ").lower()
        sustain = input("Focus on sustainability? (y/n): ").lower() == 'y'

        print("\n" + "="*40)
        print(analyze_crypto(crypto, horizon, risk, sustain))
        print("="*40)

# Run the chatbot
chatbot()